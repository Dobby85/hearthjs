#!/usr/bin/env node
const program = require('commander')
const server = require('../server')
const debug = require('debug')
const watch = require('../watch')
const cluster = require('cluster')

const colors = {
  greenBackground: '\u001b[42;1m',
  reset: '\u001b[0m'
}

program
  .option('-p, --port <port>', 'Server port')
  .option('-c, --cluster <cluster>', 'Number of cluster')
  .option('-l, --lang <lang>', 'Default server lang')
  .option('--db_port <dbPort>', 'Database port')
  .option('--db_host <dHhost>', 'Database host')
  .option('--db_name <dbName>', 'Database name')
  .option('--db_username <dbUsername>', 'Database username')
  .option('--db_password <dbPassword>', 'Database password')
  .description('Start server with debug')
  .action((mode, options) => {
    if (typeof mode === 'object') {
      console.log('Invalid argument for debug command. Try dev, test or prod')
      return process.exit(1)
    }

    if (mode !== 'dev' && mode !== 'prod') {
      console.log(`Unknown mode ${mode}. Try with dev or prod.`)
      return process.exit(1)
    }

    // Enable debug
    debug.enable('hearthjs')

    // Start watching files
    watch.watchServerFiles((event, filename) => {
      if (cluster.isMaster) {
        console.log(`File ${filename} has changed, crashing server and run it with new changes...`)
      }

      server.close('SIGTERM', (err) => {
        if (err) {
          console.log('An error occured while stopping server: ', err)
        }

        if (cluster.isMaster) {
          server.run(mode, process.env.HEARTH_SERVER_PATH, options, (err) => {
            if (err) {
              console.log('An error occured while running server: ', err)
              return process.exit(1)
            }
          })
        }
      })
    }, (err) => {
      if (err) {
        console.log('An error occured while watching files: ', err)
      }

      if (cluster.isMaster) {
        console.log(`${colors.greenBackground}        DEBUG MODE        ${colors.reset}\n`)
      }
      server.run(mode, process.env.HEARTH_SERVER_PATH, options, (err) => {
        if (err) {
          console.log('An error occured while running server: ', err)
          return process.exit(1)
        }
      })
    })
  })
  .parse(process.argv)
